#            popup = ~paste0("Date: ", incident_datetime, "<br />",
#            "Incident: ", incident_description)) %>%
addHeatmap(lng = ~longitude, lat = ~latitude, blur = 20, max = 0.05, radius = 5)
# Map of Criminal Activity
orem %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180,
incident_description == "Traffic Offense") %>%
leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE)) %>%
# addCircleMarkers(lng = ~longitude,
#            lat = ~latitude,
#            popup = ~paste0("Date: ", incident_datetime, "<br />",
#            "Incident: ", incident_description)) %>%
addHeatmap(lng = ~longitude, lat = ~latitude, blur = 20, max = 0.05, radius = 10)
# Map of Criminal Activity
orem %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180,
incident_description == "Traffic Offense") %>%
leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE)) %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
popup = ~paste0("Date: ", incident_datetime, "<br />",
"Incident: ", incident_description)) %>%
addLayersControl(
baseGroups = names(orem),
options = layersControlOptions(collapsed = FALSE)
)
# Map of Criminal Activity
orem %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180,
incident_description == "Traffic Offense") %>%
leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE)) %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
popup = ~paste0("Date: ", incident_datetime, "<br />",
"Incident: ", incident_description)) %>%
addLayersControl(
baseGroups = incident_description,
options = layersControlOptions(collapsed = FALSE)
)
# Map of Criminal Activity
orem %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180,
incident_description == "Traffic Offense") %>%
leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE)) %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
popup = ~paste0("Date: ", incident_datetime, "<br />",
"Incident: ", incident_description)) %>%
addLayersControl(
baseGroups = ~incident_description,
options = layersControlOptions(collapsed = FALSE)
)
# Map of Criminal Activity
orem %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180) %>%
leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE)) %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
popup = ~paste0("Date: ", incident_datetime, "<br />",
"Incident: ", incident_description)) %>%
addLayersControl(
baseGroups = ~incident_description,
options = layersControlOptions(collapsed = FALSE)
)
# Map of Criminal Activity
orem %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180) %>%
leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE)) %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
popup = ~paste0("Date: ", incident_datetime, "<br />",
"Incident: ", incident_description),
opacity = .1) %>%
addLayersControl(
baseGroups = ~incident_description,
options = layersControlOptions(collapsed = FALSE)
)
orem <- as_tibble(fromJSON("https://opendata.utah.gov/resource/52dt-95n9.json?$limit=20000")) %>%
mutate(incident_description = str_replace_all(incident_description, "Description: ", ""),
latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180)
orem %>%
group_by(incident_description) %>%
slice(1) %>%
pull(incident_description)
incidents <- orem %>%
group_by(incident_description) %>%
slice(1) %>%
pull(incident_description)
m <- leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE))
names(incidents)
incidents
incidents %>%                     # get names of markers in awesomeIconList
walk(function(x)                         # then walk through vector of names one at a time
m <<-
m %>% addCircleMarkers(             # creating a new awesome marker layer
data = filter(orem, incident_description == x), # for each category in the maine data
group = x,
lng = ~longitude,
lat = ~latitude,
popup = ~paste0("Date: ", incident_datetime, "<br />",
"Incident: ", incident_description),
opacity = .1))
orem <- as_tibble(fromJSON("https://opendata.utah.gov/resource/52dt-95n9.json?$limit=20000")) %>%
mutate(incident_description = str_replace_all(incident_description, "Description: ", ""),
longitude = as.numeric(longitude),
latitude = as.numeric(latitude),
latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180,
created_at = as_date(created_at))
incidents <- orem %>%
group_by(incident_description) %>%
slice(1) %>%
pull(incident_description)
m <- leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE))
incidents %>%                     # get names of markers in awesomeIconList
walk(function(x)                         # then walk through vector of names one at a time
m <<-
m %>% addCircleMarkers(             # creating a new awesome marker layer
data = filter(orem, incident_description == x), # for each category in the maine data
group = x,
lng = ~longitude,
lat = ~latitude,
popup = ~paste0("Date: ", incident_datetime, "<br />",
"Incident: ", incident_description),
opacity = .1))
m %>%
addLayersControl(
baseGroups = ~incident_description,
options = layersControlOptions(collapsed = FALSE)
)
orem
orem <- as_tibble(fromJSON("https://opendata.utah.gov/resource/52dt-95n9.json?$limit=20000")) %>%
mutate(incident_description = str_replace_all(incident_description, "Description: ", ""),
longitude = as.numeric(longitude),
latitude = as.numeric(latitude),
created_at = as_date(created_at)) %>%
mutate(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180)
orem
orem <- as_tibble(fromJSON("https://opendata.utah.gov/resource/52dt-95n9.json?$limit=20000")) %>%
mutate(incident_description = str_replace_all(incident_description, "Description: ", ""),
longitude = as.numeric(longitude),
latitude = as.numeric(latitude),
created_at = as_date(created_at)) %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180)
orem
incidents <- orem %>%
group_by(incident_description) %>%
slice(1) %>%
pull(incident_description)
m <- leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE))
m
incidents %>%                     # get names of markers in awesomeIconList
walk(function(x)                         # then walk through vector of names one at a time
m <<-
m %>% addCircleMarkers(             # creating a new awesome marker layer
data = filter(orem, incident_description == x), # for each category in the maine data
group = x,
lng = ~longitude,
lat = ~latitude,
popup = ~paste0("Date: ", incident_datetime, "<br />",
"Incident: ", incident_description),
opacity = .1))
m %>%
addLayersControl(
baseGroups = ~incident_description,
options = layersControlOptions(collapsed = FALSE)
)
m %>%
addLayersControl(
baseGroups = incidents,
options = layersControlOptions(collapsed = FALSE)
)
library(tidyverse)
library(rvest)
library(RSelenium)
library(robotstxt)
library(httr)
library(jsonlite)
library(gganimate)
library(gifski)
library(rbokeh)
library(trelliscopejs)
library(lubridate)
library(sf)
library(wellknown)
library(rgeos)
library(usmap)
library(maps)
library(leaflet)
library(leaflet.extras)
library(magrittr)
max(orem$created_at)
min(orem$created_at)
orem %>% View()
min(orem$incident_datetime)
max(orem$incident_datetime)
orem %>%
filter(incident_datetime > "2018-01-01" & incident_datetime < "2019-01-01")
orem %>%
filter(incident_datetime > "2018-01-01" & incident_datetime < "2019-01-01")%>% View()
orem %>%
filter(incident_datetime > "2017-01-01" & incident_datetime < "2018-01-01")
orem %>%
filter(incident_datetime > "2016-01-01" & incident_datetime < "2017-01-01")
orem %>%
filter(incident_datetime > "2015-01-01" & incident_datetime < "2016-01-01")
orem %>%
filter(incident_datetime > "2014-01-01" & incident_datetime < "2015-01-01")
orem %>%
filter(incident_datetime > "2018-01-01" & incident_datetime < "2019-01-01")
orem %>%
filter(incident_datetime > "2015-01-01" & incident_datetime < "2016-01-01")
orem <- orem %>%
filter(incident_datetime > "2018-01-01" & incident_datetime < "2019-01-01")
incidents <- orem %>%
group_by(incident_description) %>%
slice(1) %>%
pull(incident_description)
m <- leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addTiles(options = tileOptions(updateWhenIdle = TRUE,
updateWhenZooming = FALSE))
incidents %>%                     # get names of markers in awesomeIconList
walk(function(x)                         # then walk through vector of names one at a time
m <<-
m %>% addCircleMarkers(             # creating a new awesome marker layer
data = filter(orem, incident_description == x), # for each category in the maine data
group = x,
lng = ~longitude,
lat = ~latitude,
popup = ~paste0("Date: ", incident_datetime, "<br />",
"Incident: ", incident_description),
opacity = .1))
m %>%
addLayersControl(
baseGroups = incidents,
options = layersControlOptions(collapsed = FALSE)
)
orem <- as_tibble(fromJSON("https://opendata.utah.gov/resource/52dt-95n9.json?$limit=20000")) %>%
mutate(incident_description = str_replace_all(incident_description, "Description: ", ""),
longitude = as.numeric(longitude),
latitude = as.numeric(latitude),
created_at = as_date(created_at)
# incident_datetime = as_date(incident_datetime)
) %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180)
orem_f <- orem %>%
filter(incident_datetime > "2018-01-01" & incident_datetime < "2019-01-01")
orem %>%
mutate(year = year(incident_datetime))
orem %>%
mutate(year = floor_date(incident_datetime, unit = "1 year")) %>%
group_by(year) %>%
summarise(count = n())
orem %>%
mutate(year = floor_date(incident_datetime, unit = "1 year")
)
orem %>%
mutate(year = floor_date(incident_datetime, unit = "year 1")) %>%
group_by(year) %>%
summarise(count = n())
?floor_date
orem %>%
mutate(year = floor_date(incident_datetime, unit = "year")) %>%
group_by(year) %>%
summarise(count = n())
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(incident_datetime, unit = "year")) %>%
group_by(year) %>%
summarise(count = n())
orem %>%
filter(!is.na(incident_datetime),
incident_datetime > "2018-01-01" & incident_datetime < "2019-01-01") %>%
mutate(year = floor_date(incident_datetime, unit = "year")) %>%
group_by(year) %>%
summarise(count = n())
orem %>%
filter(!is.na(incident_datetime),
incident_datetime > "2018-01-01" & incident_datetime < "2019-01-01")
orem %>%
filter(!is.na(incident_datetime))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(incident_datetime, unit = "1 year")) %>%
group_by(year) %>%
summarise(count = n())
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(year) %>%
summarise(count = n())
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(created_at), unit = "year")) %>%
group_by(year) %>%
summarise(count = n())
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(updated_at), unit = "year")) %>%
group_by(year) %>%
summarise(count = n())
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(year) %>%
summarise(count = n())
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(year) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) %>%
geom_line()
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(year) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) +
geom_line()
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(year) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) +
geom_line() +
geom_point()
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(day_of_week, hour_of_day) %>%
summarise(count = n())
?geom_tile
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(day_of_week, hour_of_day) %>%
summarise(count = n()) %>%
ggplot(aes(day_of_week, hour_of_day)) +
geom_tile(aes(fill = count))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(day_of_week, hour_of_day) %>%
summarise(count = n()) %>%
ggplot(aes(hour_of_day, day_of_week)) +
geom_tile(aes(fill = count))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(day_of_week, hour_of_day) %>%
summarise(count = n()) %>%
arrange(hour_of_day) %>%
ggplot(aes(hour_of_day, day_of_week)) +
geom_tile(aes(fill = count))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(day_of_week, hour_of_day) %>%
summarise(count = n())
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day)) %>%
group_by(day_of_week, hour_of_day) %>%
summarise(count = n()) %>%
arrange(hour_of_day) %>%
ggplot(aes(hour_of_day, day_of_week)) +
geom_tile(aes(fill = count))
library(tidyverse)
library(rvest)
library(RSelenium)
library(robotstxt)
library(httr)
library(jsonlite)
library(gganimate)
library(gifski)
library(rbokeh)
library(trelliscopejs)
library(lubridate)
library(sf)
library(wellknown)
library(rgeos)
library(usmap)
library(maps)
library(leaflet)
library(leaflet.extras)
library(magrittr)
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day)) %>%
group_by(day_of_week, hour_of_day) %>%
summarise(count = n()) %>%
arrange(hour_of_day) %>%
ggplot(aes(hour_of_day, day_of_week)) +
geom_tile(aes(fill = count))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = day(incident_datetime))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = day(incident_datetime))%>% View()
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = weekdays(incident_datetime)) %>%
group_by(day_of_week, hour_of_day, day_number) %>%
summarise(count = n()) %>%
arrange(day_number, hour_of_day) %>%
ggplot(aes(hour_of_day, day_of_week)) +
geom_tile(aes(fill = count))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = weekdays(as_date(incident_datetime))) %>%
group_by(day_of_week, hour_of_day, day_number) %>%
summarise(count = n()) %>%
arrange(day_number, hour_of_day) %>%
ggplot(aes(hour_of_day, day_of_week)) +
geom_tile(aes(fill = count))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = weekdays(as_date(incident_datetime))) %>%
group_by(day_of_week, hour_of_day, day_number) %>%
summarise(count = n()) %>%
arrange(day_number, hour_of_day)
?weekdays
?wday
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = wday(as_date(incident_datetime))) %>%
group_by(day_of_week, hour_of_day, day_number) %>%
summarise(count = n()) %>%
arrange(day_number, hour_of_day) %>%
ggplot(aes(hour_of_day, day_of_week)) +
geom_tile(aes(fill = count))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = wday(as_date(incident_datetime))) %>%
group_by(day_of_week, hour_of_day, day_number) %>%
summarise(count = n()) %>%
arrange(day_number, hour_of_day)
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = wday(as_date(incident_datetime))) %>%
group_by(day_of_week, hour_of_day, day_number) %>%
summarise(count = n()) %>%
arrange(day_number, hour_of_day) %>%
ggplot(aes(hour_of_day, reorder(day_of_week, -day_number))) +
geom_tile(aes(fill = count))
orem
getwd()
setwd("~/Desktop/Programs/R Projects/Git R Repos/blogdown_source")
new_post(title = 'hello-world.Rmd')
library(blogdown)
new_post(title = 'hello-world.Rmd')
setwd("~/Desktop/Programs/R Projects/Git R Repos/blogdown_source/blogdown_source")
new_post(title = 'hello-world.Rmd')
serve_site()
new_post()
?new_post
new_post(title = 'hello-world', ext = ".Rmd")
serve_site()
hugo_version()
setwd("~/Desktop/Programs/R Projects/Git R Repos/blogdown_source")
serve_site()
hugo_version()
serve_site()
