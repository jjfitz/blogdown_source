html_nodes("h3") %>%
html_text()
}
m_addr <- fhtml %>%
purrr::map(rhtml)
m_addr
fhtml <- list.files(path = "./data/zillow/Rexburg", pattern = "*.htm", full.names = T)
rhtml <- function(path) {
read_html(path) %>%
html_nodes("h3") %>%
html_text()
}
m_addr <- fhtml %>%
purrr::map(rhtml)
m_addr
um_addr <- unlist(m_addr)
um_addr
tm_addr <- as_tibble(um_addr)
tm_addr
sm_addr <- tm_addr %>%
separate(value, into = c("address", "city", "state_zip"), sep = ", ") %>%
separate(state_zip, into = c("state", "zip"), sep = " ")
sm_addr <- sm_addr %>%
filter(city == "Rexburg", !is.na(state), !is.na(zip))
m_data <- NULL
all_d <- purrr::map2(sm_addr$address, sm_addr$zip, deep_search)
### Important function
deep_search <- function(address1, zip1) {
addr <- GetDeepSearchResults(address = address1, citystatezip = zip1)
print(address1)
Sys.sleep(2)
if (is.null(addr$response)) {
return(NULL)
}
# Got the following from here:
# https://stackoverflow.com/questions/38817153/zillow-api-with-r-xml-issue
results <- xmlToList(addr$response[["results"]])
# check to see if results are good?
if (is.null(results$result[1])) {
out <- apply(results, MAR=2, function(property) {
zpid <- property$zpid
county_id <- property$FIPScounty
useCode <- property$useCode
taxAssessYear <- property$taxAssessmentYear
taxAssessment <- property$taxAssessment
yearBuilt <- property$yearBuilt
lotSizeSqFt <- property$lotSizeSqFt
finishedSqFt <- property$finishedSqFt
bathrooms <- property$bathrooms
bedrooms <- property$bedrooms
links <- unlist(property$links)
address <- unlist(property$address)
z <- property$zestimate
zestdf <- list(
amount=ifelse("text" %in% names(z$amount), z$amount$text, NA),
lastupdated=z$"last-updated",
valueChange=ifelse(length(z$valueChange)==0, NA, z$valueChange),
valueLow=getValRange(z$valuationRange, "low"),
valueHigh=getValRange(z$valuationRange, "high"),
percentile=z$percentile)
list(id=zpid, address, count_id=county_id, useCode=useCode, taxAssessYear=taxAssessYear,
taxAssessment=taxAssessment, yearBuilt=yearBuilt, lotSizeSqFt=lotSizeSqFt,
finishedSqFt=finishedSqFt, bathrooms=bathrooms,
bedrooms=bedrooms, zestdf, links)
})
}
if (!is.null(results$result[1])) {
out <- apply(as.matrix(results$result), MAR=2, function(property) {
zpid <- property$zpid
county_id <- property$FIPScounty
useCode <- property$useCode
taxAssessYear <- property$taxAssessmentYear
taxAssessment <- property$taxAssessment
yearBuilt <- property$yearBuilt
lotSizeSqFt <- property$lotSizeSqFt
finishedSqFt <- property$finishedSqFt
bathrooms <- property$bathrooms
bedrooms <- property$bedrooms
links <- unlist(property$links)
address <- unlist(property$address)
z <- property$zestimate
zestdf <- list(
amount=ifelse("text" %in% names(z$amount), z$amount$text, NA),
lastupdated=z$"last-updated",
valueChange=ifelse(length(z$valueChange)==0, NA, z$valueChange),
valueLow=getValRange(z$valuationRange, "low"),
valueHigh=getValRange(z$valuationRange, "high"),
percentile=z$percentile)
list(id=zpid, address, count_id=county_id, useCode=useCode, taxAssessYear=taxAssessYear,
taxAssessment=taxAssessment, yearBuilt=yearBuilt, lotSizeSqFt=lotSizeSqFt,
finishedSqFt=finishedSqFt, bathrooms=bathrooms,
bedrooms=bedrooms, zestdf, links)
})
}
data <- as_tibble(do.call(rbind, lapply(out, unlist)),
row.names=seq_len(length(out)))
m_data <- rbind(m_data, data)
}
all_d <- purrr::map2(sm_addr$address, sm_addr$zip, deep_search)
getValRange <- function(x, hilo) {
ifelse(hilo %in% unlist(dimnames(x)), x["text",hilo][[1]], NA)
}
all_d <- purrr::map2(sm_addr$address, sm_addr$zip, deep_search)
bind_rows(all_d)
c_d <- bind_rows(all_d)
write.csv(c_d, "./data/Zillow/rex_zil.csv")
read_csv("./data/Zillow/rex_zil.csv")
c_d %>%
mutate(amount = as.numeric(amount),
lotSizeSqFt = as.numeric(lotSizeSqFt)) %>%
filter(lotSizeSqFt < 500000) %>%
ggplot(aes(amount, lotSizeSqFt)) +
geom_point()
c_d %>%
mutate(amount = as.numeric(amount),
lotSizeSqFt = as.numeric(lotSizeSqFt)) %>%
filter(lotSizeSqFt < 500000) %>%
ggplot(aes(amount, lotSizeSqFt)) +
geom_point() +
scale_y_continuous(labels = comma)
library(scales)
c_d %>%
mutate(amount = as.numeric(amount),
lotSizeSqFt = as.numeric(lotSizeSqFt)) %>%
filter(lotSizeSqFt < 500000) %>%
ggplot(aes(amount, lotSizeSqFt)) +
geom_point() +
scale_y_continuous(labels = comma)
c_d %>%
mutate(amount = as.numeric(amount),
lotSizeSqFt = as.numeric(lotSizeSqFt)) %>%
filter(lotSizeSqFt < 500000) %>%
ggplot(aes(amount, lotSizeSqFt)) +
geom_point() +
scale_y_continuous(labels = comma) +
scale_x_continuous(labels = comma)
c_d %>%
filter(!is.na(yearBuilt)) %>%
group_by(yearBuilt) %>%
# summarise(count = n()) %>%
ggplot(aes(yearBuilt)) +
geom_bar() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
)
c_d %>%
ggplot(aes(useCode)) +
geom_bar()
c_d %>%
filter(useCode == "SingleFamily") %>%
mutate(amount = as.numeric(amount),
lotSizeSqFt = as.numeric(lotSizeSqFt)) %>%
filter(lotSizeSqFt < 100000) %>%
ggplot(aes(amount, lotSizeSqFt)) +
geom_point() +
geom_smooth(method = "lm")
c_d %>%
filter(useCode == "SingleFamily") %>%
mutate(amount = as.numeric(amount),
lotSizeSqFt = as.numeric(lotSizeSqFt)) %>%
filter(lotSizeSqFt < 100000) %>%
ggplot(aes(amount, lotSizeSqFt)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(labels = comma)
c_d %>%
filter(useCode == "SingleFamily") %>%
mutate(amount = as.numeric(amount),
lotSizeSqFt = as.numeric(lotSizeSqFt)) %>%
filter(lotSizeSqFt < 100000)
c_d %>%
filter(useCode == "SingleFamily") %>%
mutate(amount = as.numeric(amount),
lotSizeSqFt = as.numeric(lotSizeSqFt)) %>%
filter(lotSizeSqFt < 100000) %>%
ggplot(aes(amount, lotSizeSqFt)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(labels = comma)
c_d
c_d %>% View()
library(tidyverse)
library(rvest)
library(RSelenium)
library(robotstxt)
library(httr)
library(jsonlite)
library(gganimate)
library(gifski)
library(rbokeh)
library(trelliscopejs)
library(lubridate)
library(sf)
library(wellknown)
library(rgeos)
library(usmap)
library(maps)
library(leaflet)
library(leaflet.extras)
library(magrittr)
install.packages("ggthemes")
install.packages("shinydashboard")
orem %>% view()
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(year) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) +
geom_line() +
geom_point()
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = wday(as_date(incident_datetime))) %>%
group_by(day_of_week, hour_of_day, day_number) %>%
summarise(count = n()) %>%
arrange(day_number, hour_of_day) %>%
ggplot(aes(hour_of_day, reorder(day_of_week, -day_number))) +
geom_tile(aes(fill = count))
table(orem$city)
shiny::runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
runApp()
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
shiny::runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
as_tibble(fromJSON("https://opendata.utah.gov/resource/52dt-95n9.json?$limit=20000")) %>%
mutate(incident_description = str_replace_all(incident_description, "Description: ", ""),
longitude = as.numeric(longitude),
latitude = as.numeric(latitude),
created_at = as_date(created_at),
year = floor_date(as_date(incident_datetime), unit = "year")
# incident_datetime = as_date(incident_datetime)
) %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180)
as_tibble(fromJSON("https://opendata.utah.gov/resource/52dt-95n9.json?$limit=20000")) %>%
mutate(incident_description = str_replace_all(incident_description, "Description: ", ""),
longitude = as.numeric(longitude),
latitude = as.numeric(latitude),
created_at = as_date(created_at),
year = floor_date(as_date(incident_datetime), unit = "year")
# incident_datetime = as_date(incident_datetime)
) %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180)
runApp('analysis/utah_crime')
runApp('analysis/hs_leaflet')
orem %>% View()
runApp('analysis/utah_crime')
table(orem$city)
?sliderInput
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"))
runApp('analysis/utah_crime')
shiny::runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
as_date("2019")
year("2019")
orem
orem <- as_tibble(fromJSON("https://opendata.utah.gov/resource/52dt-95n9.json?$limit=20000")) %>%
mutate(incident_description = str_replace_all(incident_description, "Description: ", ""),
longitude = as.numeric(longitude),
latitude = as.numeric(latitude),
created_at = as_date(created_at)
# incident_datetime = as_date(incident_datetime)
) %>%
filter(latitude > -90 & latitude < 90,
longitude > -180 & longitude < 180)
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = wday(as_date(incident_datetime)))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = wday(as_date(incident_datetime)))%>% View()
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
?dataTableOutput
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = wday(as_date(incident_datetime))) %>%
group_by(day_of_week, hour_of_day, day_number) %>%
summarise(count = n()) %>%
arrange(day_number, hour_of_day) %>%
ggplot(aes(hour_of_day, reorder(day_of_week, -day_number))) +
geom_tile(aes(fill = count))
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(year) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) +
geom_line() +
geom_point()
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "month")) %>%
group_by(year) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) +
geom_line() +
geom_point()
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year")) %>%
group_by(year) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) +
geom_line() +
geom_point()
# Counts of city
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(city) %>%
summarise(count = n())
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count))
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(parent_incident_type) %>%
summarise(count = n()) %>%
arrange(desc(count))
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count))
library(tidyverse)
library(rvest)
library(RSelenium)
library(robotstxt)
library(httr)
library(jsonlite)
library(gganimate)
library(gifski)
library(rbokeh)
library(trelliscopejs)
library(lubridate)
library(sf)
library(wellknown)
library(rgeos)
library(usmap)
library(maps)
library(leaflet)
library(leaflet.extras)
library(magrittr)
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count))
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(10)
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(10)
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(10) %>%
ggplot(aes(incident_description, count)) %>%
geom_bar(stat = "identity")
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(10) %>%
ggplot(aes(incident_description, count)) +
geom_bar(stat = "identity")
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(10) %>%
ggplot(aes(incident_description, count)) +
geom_bar(stat = "identity") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
)
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(10) %>%
ggplot(aes(reorder(incident_description, -count), count)) +
geom_bar(stat = "identity") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
)
# Putting in Shiny
orem %>%
filter(!is.na(incident_datetime)) %>%
mutate(year = floor_date(as_date(incident_datetime), unit = "year"),
hour_of_day = as.numeric(hour_of_day),
day_number = wday(as_date(incident_datetime))) %>%
group_by(day_of_week, hour_of_day, day_number) %>%
summarise(count = n()) %>%
arrange(day_number, hour_of_day) %>%
ggplot(aes(hour_of_day, reorder(day_of_week, -day_number))) +
geom_tile(aes(fill = count))
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(10) %>%
ggplot(aes(reorder(incident_description, -count), count)) +
geom_bar(stat = "identity") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
)
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(200) %>%
ggplot(aes(reorder(incident_description, -count), count)) +
geom_bar(stat = "identity") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
)
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(20) %>%
ggplot(aes(reorder(incident_description, -count), count)) +
geom_bar(stat = "identity") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
)
orem %>%
mutate(created_at = as_date(created_at)) %>%
group_by(incident_description) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(15) %>%
ggplot(aes(reorder(incident_description, -count), count)) +
geom_bar(stat = "identity") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
)
shiny::runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
as_tibble(fromJSON("https://opendata.utah.gov/resource/w6jt-ewb2.json?$limit=190000"))
library(shiny)
library(tidyverse)
library(forcats)
library(magrittr)
library(httr)
library(jsonlite)
library(lubridate)
library(magrittr)
as_tibble(fromJSON("https://opendata.utah.gov/resource/w6jt-ewb2.json?$limit=190000"))
runApp('analysis/utah_crime')
runApp('analysis/utah_crime')
setwd("~/Desktop/Programs/R Projects/Git R Repos/blogdown_source")
blogdown::serve_site()
blogdown::serve_site()
install.packages("here")
library(here)
here("data", "my_fam.csv")
blogdown::serve_site()
list.files(../../data)
list.files("../../data")
getwd()
list.files("../../../data")
blogdown::serve_site()
list.files("../../data")
list.files("../data")
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
